/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import org.openapitools.client.models.RemarkCodeListResidentialUnitEntry
import org.openapitools.client.models.Service
import org.openapitools.client.models.UnitOfMeasure

/**
 * Consumption for a specific service, period and billing unit.
 *
 * @param service 
 * @param unitofmeasure 
 * @param converted True if the amount is converted from another unit of measure.  If set to `true`, the `unitofmeasure` contains `KWH`. These KWH must be differentiated from measured KWH and their interpretation might be different.  This applies e.g. when consumption measured in `HCU` is converted to `KWH` as required by the German HeizkostenV regulations. 
 * @param estimated True if this is an estimated consumption.
 * @param errors True if errors occurred and no consumption can be presented.
 * @param amount The actual consumption amount in case no errors are present, related to `unitofmeasure`.
 * @param remarkcodes statuslist on residential unit base
 */

@Serializable
data class Consumption (

    @SerialName("service")
    val service: Service,

    @SerialName("unitofmeasure")
    val unitofmeasure: UnitOfMeasure,

    /* True if the amount is converted from another unit of measure.  If set to `true`, the `unitofmeasure` contains `KWH`. These KWH must be differentiated from measured KWH and their interpretation might be different.  This applies e.g. when consumption measured in `HCU` is converted to `KWH` as required by the German HeizkostenV regulations.  */
    @SerialName("converted")
    val converted: kotlin.Boolean,

    /* True if this is an estimated consumption. */
    @SerialName("estimated")
    val estimated: kotlin.Boolean,

    /* True if errors occurred and no consumption can be presented. */
    @SerialName("errors")
    val errors: kotlin.Boolean,

    /* The actual consumption amount in case no errors are present, related to `unitofmeasure`. */
    @SerialName("amount")
    val amount: Double? = null,

    /* statuslist on residential unit base */
    @SerialName("remarkcodes")
    val remarkcodes: kotlin.collections.List<RemarkCodeListResidentialUnitEntry>? = null

) {
    override fun toString(): String {
        val prettyJson = Json { // this returns the JsonBuilder
            prettyPrint = true
            // optional: specify indent
            prettyPrintIndent = " "
        }
        return prettyJson.encodeToString(this)
    }

}

