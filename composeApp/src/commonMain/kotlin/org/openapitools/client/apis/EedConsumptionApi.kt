/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.ktor.client.*
import io.ktor.http.*

import org.openapitools.client.models.ConsumptionData
import org.openapitools.client.models.ConsumptionSummary
import org.openapitools.client.models.ServiceConfiguration
import org.openapitools.client.models.ServiceConfigurationCount

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success

class EedConsumptionApi(basePath: String, username: String, password: String) :
    ApiClient(basePath, username = username, password = password) {

    /**
     * Get the number of available billing units
     * Get the number of billing units, independent of the EED activation status.
     * @return ServiceConfigurationCount
     * @throws IllegalStateException If the request is not correctly configured
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    suspend fun countBillingunits(): ServiceConfigurationCount {
        val localVarResponse = countBillingunitsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ServiceConfigurationCount
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get the number of available billing units
     * Get the number of billing units, independent of the EED activation status.
     * @return ApiResponse<ServiceConfigurationCount?>
     * @throws IllegalStateException If the request is not correctly configured
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class)
    suspend fun countBillingunitsWithHttpInfo(): ApiResponse<ServiceConfigurationCount?> {
        val localVariableConfig = countBillingunitsRequestConfig()

        return request<Unit, ServiceConfigurationCount>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation countBillingunits
     *
     * @return RequestConfig
     */
    fun countBillingunitsRequestConfig(): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/eedbillingunits/count",
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get overview of billingunits with their consumption data service configuration and status
     * Returns a list of all billing units of the current user that are configured for data exchange and a flag if consumption data services are enabled or comments about availability of the service
     * @param limit How many result entries to return at one time (max 100) (optional, default to 20)
     * @param offset How many result entries should be skipped for pagination (optional, default to 0)
     * @return ServiceConfiguration
     * @throws IllegalStateException If the request is not correctly configured
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    suspend fun getBillingunits(limit: kotlin.Int? = 20, offset: kotlin.Int? = 0): ServiceConfiguration {
        val localVarResponse = getBillingunitsWithHttpInfo(limit = limit, offset = offset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ServiceConfiguration
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get overview of billingunits with their consumption data service configuration and status
     * Returns a list of all billing units of the current user that are configured for data exchange and a flag if consumption data services are enabled or comments about availability of the service
     * @param limit How many result entries to return at one time (max 100) (optional, default to 20)
     * @param offset How many result entries should be skipped for pagination (optional, default to 0)
     * @return ApiResponse<ServiceConfiguration?>
     * @throws IllegalStateException If the request is not correctly configured
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class)
    suspend fun getBillingunitsWithHttpInfo(
        limit: kotlin.Int?,
        offset: kotlin.Int?
    ): ApiResponse<ServiceConfiguration?> {
        val localVariableConfig = getBillingunitsRequestConfig(limit = limit, offset = offset)

        return request<Unit, ServiceConfiguration>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getBillingunits
     *
     * @param limit How many result entries to return at one time (max 100) (optional, default to 20)
     * @param offset How many result entries should be skipped for pagination (optional, default to 0)
     * @return RequestConfig
     */
    fun getBillingunitsRequestConfig(limit: kotlin.Int?, offset: kotlin.Int?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/eedbillingunits",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get consumption data for a billing unit and specific consumption period.
     *
     * @param billingunit The identifier of the billing unit defined by the measuring service company to request data for.
     * @param period Identifier of a requested consumption period.
     * @return ConsumptionData
     * @throws IllegalStateException If the request is not correctly configured
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    suspend fun getConsumptionData(billingunit: kotlin.String, period: kotlin.String): ConsumptionData {
        val localVarResponse = getConsumptionDataWithHttpInfo(billingunit = billingunit, period = period)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ConsumptionData
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get consumption data for a billing unit and specific consumption period.
     *
     * @param billingunit The identifier of the billing unit defined by the measuring service company to request data for.
     * @param period Identifier of a requested consumption period.
     * @return ApiResponse<ConsumptionData?>
     * @throws IllegalStateException If the request is not correctly configured
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class)
    suspend fun getConsumptionDataWithHttpInfo(
        billingunit: kotlin.String,
        period: kotlin.String
    ): ApiResponse<ConsumptionData?> {
        val localVariableConfig = getConsumptionDataRequestConfig(billingunit = billingunit, period = period)

        return request<Unit, ConsumptionData>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getConsumptionData
     *
     * @param billingunit The identifier of the billing unit defined by the measuring service company to request data for.
     * @param period Identifier of a requested consumption period.
     * @return RequestConfig
     */
    fun getConsumptionDataRequestConfig(billingunit: kotlin.String, period: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/billingunits/{billingunit}/consumptions/periods/{period}".replace(
                "{" + "billingunit" + "}",
                encodeURIComponent(billingunit.toString())
            ).replace("{" + "period" + "}", encodeURIComponent(period.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get a summary of available consumption data sets for a billing unit.
     * This list contains the available consumption data sets for a billing unit.  The number of available data is subject to contractual agreement between PM and MSC.
     * @param billingunit The identifier of the billing unit defined by the measuring service company to request data for.
     * @param year Request consumption summaries for this year only. (optional)
     * @return ConsumptionSummary
     * @throws IllegalStateException If the request is not correctly configured
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    suspend fun getConsumptionSummary(billingunit: kotlin.String, year: kotlin.Int? = null): ConsumptionSummary {
        val localVarResponse = getConsumptionSummaryWithHttpInfo(billingunit = billingunit, year = year)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ConsumptionSummary
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get a summary of available consumption data sets for a billing unit.
     * This list contains the available consumption data sets for a billing unit.  The number of available data is subject to contractual agreement between PM and MSC.
     * @param billingunit The identifier of the billing unit defined by the measuring service company to request data for.
     * @param year Request consumption summaries for this year only. (optional)
     * @return ApiResponse<ConsumptionSummary?>
     * @throws IllegalStateException If the request is not correctly configured
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class)
    suspend fun getConsumptionSummaryWithHttpInfo(
        billingunit: kotlin.String,
        year: kotlin.Int?
    ): ApiResponse<ConsumptionSummary?> {
        val localVariableConfig = getConsumptionSummaryRequestConfig(billingunit = billingunit, year = year)

        return request<Unit, ConsumptionSummary>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getConsumptionSummary
     *
     * @param billingunit The identifier of the billing unit defined by the measuring service company to request data for.
     * @param year Request consumption summaries for this year only. (optional)
     * @return RequestConfig
     */
    fun getConsumptionSummaryRequestConfig(billingunit: kotlin.String, year: kotlin.Int?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (year != null) {
                    put("year", listOf(year.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/billingunits/{billingunit}/consumptions/periods".replace(
                "{" + "billingunit" + "}",
                encodeURIComponent(billingunit.toString())
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        URLBuilder(baseUrl).run {
            path(uriComponent)
            build()
            encodedPathSegments[0]
        }
}
